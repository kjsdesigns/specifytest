{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://specify.dev/schemas/template-schema.json",
  "title": "Specify Framework Template and Validation Rules",
  "description": "Single source of truth for all specification validation rules. This schema defines validation for all spec types, common fields, and error guidance.",

  "definitions": {
    "commonFields": {
      "description": "Fields required in all specification types",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[A-Z]+-[0-9]+$",
          "description": "Spec ID in format PREFIX-NUMBER (e.g., TC-001, W-042)"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-z0-9_-]{1,50}$",
          "maxLength": 50,
          "description": "Descriptive name: lowercase snake_case or kebab-case, max 4 words"
        },
        "type": {
          "type": "string",
          "description": "Specification type, must match one of the registered types"
        },
        "status": {
          "type": "string",
          "enum": ["draft", "ready", "active", "deprecated"],
          "description": "Current status of the specification"
        },
        "hash_timestamp": {
          "type": "string",
          "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$",
          "description": "ISO 8601 UTC timestamp: YYYY-MM-DDTHH:MM:SSZ, updated on every save"
        },
        "related": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[A-Z]+-[0-9]+$"
          },
          "description": "Array of related spec IDs, validated for existence and name match"
        }
      },
      "required": ["id", "name", "type", "status", "hash_timestamp"]
    },

    "caseReference": {
      "description": "Reference to a test case, scenario case, or precondition case",
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "pattern": "^/specs/(test-cases|scenario-cases|precondition-cases)/[A-Z]+-[0-9]+-[a-z0-9_-]+\\.yaml$",
          "description": "Absolute path from repository root to case file"
        },
        "description": {
          "type": "string",
          "description": "Optional description of why this case is referenced"
        }
      },
      "required": ["path"]
    },

    "TestCase": {
      "description": "Test case specification for individual test scenarios",
      "allOf": [
        {"$ref": "#/definitions/commonFields"},
        {
          "type": "object",
          "properties": {
            "purpose": {
              "type": "string",
              "minLength": 10,
              "description": "Why this test exists and what it validates"
            },
            "preconditions": {
              "type": "array",
              "items": {"$ref": "#/definitions/caseReference"},
              "description": "Precondition cases that must be satisfied"
            },
            "steps": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "action": {"type": "string"},
                  "expected": {"type": "string"}
                },
                "required": ["action", "expected"]
              },
              "description": "Test steps with actions and expected results"
            },
            "validations": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "check": {"type": "string"},
                  "expected": {"type": "string"}
                },
                "required": ["check", "expected"]
              },
              "description": "Validation checks to verify test success"
            }
          },
          "required": ["purpose", "preconditions", "steps", "validations"]
        }
      ]
    },

    "ScenarioCase": {
      "description": "Scenario case for end-to-end workflows",
      "allOf": [
        {"$ref": "#/definitions/commonFields"},
        {
          "type": "object",
          "properties": {
            "purpose": {
              "type": "string",
              "minLength": 10,
              "description": "What user journey or workflow this validates"
            },
            "phases": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "phase_id": {"type": "string", "pattern": "^[a-z0-9_-]+$"},
                  "phase_name": {"type": "string"},
                  "description": {"type": "string"},
                  "preconditions": {
                    "type": "array",
                    "items": {"$ref": "#/definitions/caseReference"}
                  },
                  "test_cases": {
                    "type": "array",
                    "items": {"$ref": "#/definitions/caseReference"}
                  }
                },
                "required": ["phase_id", "phase_name", "description", "preconditions", "test_cases"]
              },
              "description": "Sequential phases of the scenario"
            }
          },
          "required": ["purpose", "phases"]
        }
      ]
    },

    "PreconditionCase": {
      "description": "Precondition case for reusable setup/teardown",
      "allOf": [
        {"$ref": "#/definitions/commonFields"},
        {
          "type": "object",
          "properties": {
            "purpose": {
              "type": "string",
              "minLength": 10,
              "description": "What state or condition this establishes"
            },
            "setup_steps": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "action": {"type": "string"},
                  "expected": {"type": "string"}
                },
                "required": ["action"]
              },
              "description": "Steps to establish the precondition"
            },
            "teardown_steps": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "action": {"type": "string"}
                },
                "required": ["action"]
              },
              "description": "Optional cleanup steps"
            }
          },
          "required": ["purpose", "setup_steps"]
        }
      ]
    }
  },

  "validation": {
    "description": "Validation rules and error guidance",
    "rules": {
      "filename": {
        "pattern": "^[A-Z]+-[0-9]+-[a-z0-9_-]+\\.(yaml|md)$",
        "description": "Filename must be: PREFIX-NUMBER-descriptive_name.ext"
      },
      "nameFieldMatch": {
        "description": "The 'name' field must match the descriptive part of the filename"
      },
      "prefixMatch": {
        "description": "The ID prefix must match the spec type's registered prefix"
      },
      "extensionMatch": {
        "description": "File extension must match spec type: .yaml for cases, .md for others"
      },
      "uniqueId": {
        "description": "No two specs can have the same ID across the repository"
      },
      "uniqueName": {
        "description": "No two specs of the same type can have the same name"
      },
      "crossReferences": {
        "idExists": {
          "description": "Referenced spec ID must exist in repository"
        },
        "nameMatch": {
          "description": "When referencing, verify the name field matches"
        }
      }
    },

    "errorGuidance": {
      "invalidNameFormat": {
        "message": "Name format invalid: must be lowercase snake_case or kebab-case, max 4 words, matching pattern ^[a-z0-9_-]{1,50}$",
        "fix": {
          "script": "migrate-spec-names.py",
          "command": "python .specify/scripts/migrate-spec-names.py {file}",
          "category": "auto-fixable"
        }
      },
      "invalidNameLength": {
        "message": "Name too long or too many words: max 4 words, 50 characters total",
        "fix": {
          "script": "migrate-spec-names.py",
          "command": "python .specify/scripts/migrate-spec-names.py {file}",
          "category": "auto-fixable"
        }
      },
      "filenameIdMismatch": {
        "message": "Filename doesn't match spec ID. Expected format: {expected_id}-{name}.{ext}",
        "fix": {
          "script": "migrate-spec-names.py",
          "command": "python .specify/scripts/migrate-spec-names.py {file}",
          "category": "auto-fixable"
        }
      },
      "filenameNameMismatch": {
        "message": "Filename descriptive part doesn't match 'name' field",
        "fix": {
          "script": "migrate-spec-names.py",
          "command": "python .specify/scripts/migrate-spec-names.py {file}",
          "category": "auto-fixable"
        }
      },
      "invalidReference": {
        "message": "Referenced spec {ref} not found in repository",
        "fix": {
          "script": "fix-references.py",
          "command": "python .specify/scripts/fix-references.py {file} --ref {ref}",
          "category": "auto-fixable"
        }
      },
      "referenceNameMismatch": {
        "message": "Referenced spec {ref} exists but name doesn't match",
        "fix": {
          "script": "fix-references.py",
          "command": "python .specify/scripts/fix-references.py {file} --ref {ref}",
          "category": "auto-fixable"
        }
      },
      "invalidTimestamp": {
        "message": "Timestamp must be valid ISO 8601 UTC format: YYYY-MM-DDTHH:MM:SSZ",
        "fix": {
          "script": "manual",
          "command": "Update hash_timestamp to current UTC time",
          "category": "manual-fix"
        }
      },
      "invalidStatus": {
        "message": "Status must be one of: draft, ready, active, deprecated",
        "fix": {
          "script": "manual",
          "command": "Update status field to valid value",
          "category": "manual-fix"
        }
      },
      "missingRequiredField": {
        "message": "Missing required field: {field}",
        "fix": {
          "script": "manual",
          "command": "Add required field '{field}' to spec",
          "category": "manual-fix"
        }
      },
      "invalidCasePath": {
        "message": "Case path must start with /specs/ and end with .yaml",
        "fix": {
          "script": "fix-references.py",
          "command": "python .specify/scripts/fix-references.py {file}",
          "category": "auto-fixable"
        }
      },
      "duplicateId": {
        "message": "Duplicate spec ID {id} found in {other_file}",
        "fix": {
          "script": "manual",
          "command": "Assign a unique ID to one of the specs",
          "category": "manual-fix"
        }
      },
      "duplicateName": {
        "message": "Duplicate spec name '{name}' for type {type} found in {other_file}",
        "fix": {
          "script": "manual",
          "command": "Choose a different name for one of the specs",
          "category": "manual-fix"
        }
      },
      "wrongExtension": {
        "message": "Wrong file extension for type {type}. Expected: {expected}, got: {actual}",
        "fix": {
          "script": "manual",
          "command": "Rename file with correct extension",
          "category": "manual-fix"
        }
      },
      "invalidYmlExtension": {
        "message": "Invalid .yml extension. Must use .yaml",
        "fix": {
          "script": "manual",
          "command": "Rename file from .yml to .yaml",
          "category": "manual-fix"
        }
      }
    }
  }
}