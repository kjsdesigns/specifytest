# Scenario Phase Component
# Reusable patterns for organizing scenario cases into phases
# Reference in templates with: <!-- See components/spec-scenario-phases.yaml -->

# ===================================================================
# PHASE STRUCTURE
# ===================================================================

phases:
  - phase_id: [PHASE_ID]  # Unique identifier within scenario (kebab-case)
    phase_name: "[Display Name]"  # Human-readable name shown in output
    description: "[What this phase accomplishes]"  # Purpose and context

    # Preconditions needed for this phase
    preconditions:
      - path: /specs/precondition-cases/PC-[XXX].yaml
        description: "[What this precondition provides]"

    # Test cases executed in this phase
    test_cases:
      - path: /specs/test-cases/TC-[XXX].yaml
        description: "[What this test validates]"

# ===================================================================
# COMMON PHASE PATTERNS
# ===================================================================

# Pattern 1: Setup → Execute → Verify → Cleanup
# Most common pattern for end-to-end scenarios

setup_execute_verify_cleanup:
  phases:
    - phase_id: setup
      phase_name: "Setup & Preparation"
      description: "Initialize environment and prepare test data"
      preconditions:
        - path: /specs/precondition-cases/PC-[XXX].yaml
          description: "Database with test data"
        - path: /specs/precondition-cases/PC-[XXX].yaml
          description: "Clean application state"
      test_cases: []

    - phase_id: execute
      phase_name: "Execute Main Flow"
      description: "Perform the primary business operation"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Main operation test"

    - phase_id: verify
      phase_name: "Verification"
      description: "Verify expected outcomes and side effects"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Outcome verification"

    - phase_id: cleanup
      phase_name: "Cleanup"
      description: "Restore original state"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Cleanup verification"

# Pattern 2: Setup → Multiple Sequential Steps → Cleanup
# For scenarios with distinct sequential steps

multi_step_sequential:
  phases:
    - phase_id: setup
      phase_name: "Setup"
      description: "Prepare environment"
      preconditions:
        - path: /specs/precondition-cases/PC-[XXX].yaml
          description: "Initial state"
      test_cases: []

    - phase_id: step_1
      phase_name: "Step 1: [Action]"
      description: "First step in sequence"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Step 1 validation"

    - phase_id: step_2
      phase_name: "Step 2: [Action]"
      description: "Second step in sequence"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Step 2 validation"

    - phase_id: step_3
      phase_name: "Step 3: [Action]"
      description: "Third step in sequence"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Step 3 validation"

    - phase_id: cleanup
      phase_name: "Cleanup"
      description: "Restore state"
      preconditions: []
      test_cases: []

# Pattern 3: Authentication Flow
# User authentication and authorization scenario

authentication_flow:
  phases:
    - phase_id: setup
      phase_name: "Setup"
      description: "Prepare test users and clean sessions"
      preconditions:
        - path: /specs/precondition-cases/PC-[XXX].yaml
          description: "Database with test users"
        - path: /specs/precondition-cases/PC-[XXX].yaml
          description: "Clean browser session"
      test_cases: []

    - phase_id: login
      phase_name: "User Login"
      description: "Test login functionality"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Login with valid credentials"
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Login with invalid credentials"

    - phase_id: session_management
      phase_name: "Session Management"
      description: "Verify session handling"
      preconditions:
        - path: /specs/precondition-cases/PC-[XXX].yaml
          description: "Authenticated session"
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Session timeout handling"
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Concurrent session limits"

    - phase_id: logout
      phase_name: "User Logout"
      description: "Test logout and session cleanup"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Logout and verify session cleared"

    - phase_id: cleanup
      phase_name: "Cleanup"
      description: "Remove test data"
      preconditions: []
      test_cases: []

# Pattern 4: E-commerce Purchase Flow
# Complete purchase journey

ecommerce_purchase:
  phases:
    - phase_id: setup
      phase_name: "Setup"
      description: "Prepare product catalog and user account"
      preconditions:
        - path: /specs/precondition-cases/PC-[XXX].yaml
          description: "Product catalog with test items"
        - path: /specs/precondition-cases/PC-[XXX].yaml
          description: "Authenticated user session"
      test_cases: []

    - phase_id: browse
      phase_name: "Browse Products"
      description: "Product discovery and search"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Search for products"
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "View product details"

    - phase_id: cart
      phase_name: "Shopping Cart"
      description: "Add items and manage cart"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Add items to cart"
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Update quantities"
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Remove items"

    - phase_id: checkout
      phase_name: "Checkout"
      description: "Complete purchase"
      preconditions:
        - path: /specs/precondition-cases/PC-[XXX].yaml
          description: "Cart with items"
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Enter shipping information"
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Select payment method"
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Submit order"

    - phase_id: confirmation
      phase_name: "Order Confirmation"
      description: "Verify order processed"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Verify order confirmation"
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Check email notification"

    - phase_id: cleanup
      phase_name: "Cleanup"
      description: "Remove test order"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Cancel test order"

# Pattern 5: Data Migration/ETL
# Extract, transform, load scenario

data_migration:
  phases:
    - phase_id: setup
      phase_name: "Setup"
      description: "Prepare source and destination"
      preconditions:
        - path: /specs/precondition-cases/PC-[XXX].yaml
          description: "Source data"
        - path: /specs/precondition-cases/PC-[XXX].yaml
          description: "Clean destination"
      test_cases: []

    - phase_id: extract
      phase_name: "Extract"
      description: "Extract data from source"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Verify extraction complete"

    - phase_id: transform
      phase_name: "Transform"
      description: "Transform data to target format"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Verify transformation rules"

    - phase_id: load
      phase_name: "Load"
      description: "Load data to destination"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Verify data loaded correctly"

    - phase_id: validation
      phase_name: "Validation"
      description: "Validate migrated data"
      preconditions: []
      test_cases:
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Data integrity checks"
        - path: /specs/test-cases/TC-[XXX].yaml
          description: "Record count verification"

    - phase_id: cleanup
      phase_name: "Cleanup"
      description: "Remove test data"
      preconditions: []
      test_cases: []

# ===================================================================
# PHASE EXECUTION CONFIGURATIONS
# ===================================================================

# Sequential Execution (default)
# Each phase runs after previous completes successfully
sequential_execution:
  phase_execution:
    mode: sequential
    continue_on_failure: false  # Stop on first failure
    phase_timeout: 300  # 5 minutes per phase

# Continue on Failure
# Useful for collecting all failures, not just first
continue_on_failure:
  phase_execution:
    mode: sequential
    continue_on_failure: true  # Run all phases even if some fail
    phase_timeout: 300

# Parallel Phases
# Run multiple phases concurrently (when safe)
parallel_execution:
  phase_execution:
    mode: parallel_phases
    continue_on_failure: false
    phase_timeout: 300
    # Note: Only use for truly independent phases

# Custom Dependencies
# Explicit control over phase execution order
custom_dependencies:
  phase_execution:
    mode: custom
    continue_on_failure: false
    phase_timeout: 300
    phase_dependencies:
      setup: []  # No dependencies
      phase_1: [setup]
      phase_2: [setup]  # Can run after setup, parallel with phase_1
      phase_3: [phase_1, phase_2]  # Requires both phase_1 and phase_2
      cleanup: [phase_3]

# ===================================================================
# PHASE NAMING CONVENTIONS
# ===================================================================

phase_naming_guide:
  # Use descriptive, action-oriented names
  good_examples:
    - "User Authentication"
    - "Create Order"
    - "Process Payment"
    - "Verify Email Sent"
    - "Update Profile"

  # Avoid vague names
  avoid:
    - "Phase 1"
    - "Test"
    - "Check"
    - "Do stuff"

  # Common phase names
  common_phases:
    - "Setup & Preparation"
    - "Authentication"
    - "Authorization"
    - "Main Flow"
    - "Error Handling"
    - "Edge Cases"
    - "Verification"
    - "Cleanup & Teardown"

# ===================================================================
# PHASE ORGANIZATION TIPS
# ===================================================================

tips:
  - "Group related tests into the same phase"
  - "Keep phases focused on a single concern or stage"
  - "Setup phase typically has no test cases, only preconditions"
  - "Cleanup phase ensures test isolation"
  - "Use phase descriptions to explain the 'why'"
  - "Preconditions can be phase-specific or scenario-wide"
  - "Test cases within a phase run sequentially"
  - "Phase names appear in test runner output - make them meaningful"
  - "Aim for 3-7 phases per scenario (not including setup/cleanup)"
  - "Too many phases may indicate scenario should be split"

# ===================================================================
# PHASE OUTPUT EXAMPLE
# ===================================================================

# When a test runner processes phased scenarios, output might look like:
#
# Scenario: Complete User Registration (SC-001)
# ═══════════════════════════════════════════════════
#
# Phase 1/5: Setup & Preparation
#   ✓ PC-001: Database with clean state (0.5s)
#   ✓ PC-002: Email service mock (0.2s)
#
# Phase 2/5: User Registration
#   ✓ TC-001: Register with valid email (1.2s)
#   ✓ TC-002: Reject duplicate email (0.8s)
#
# Phase 3/5: Email Verification
#   ✓ TC-003: Send verification email (0.5s)
#   ✓ TC-004: Click verification link (0.9s)
#
# Phase 4/5: Profile Setup
#   ✓ TC-005: Complete profile information (1.1s)
#
# Phase 5/5: Cleanup
#   ✓ TC-006: Remove test user (0.3s)
#
# ═══════════════════════════════════════════════════
# Scenario passed: 5/5 phases completed (5.5s total)